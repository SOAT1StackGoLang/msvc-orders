// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go
//
// Generated by this command:
//
//	mockgen -source=contracts.go -package=mocks -destination=../mocks/contracts_mock.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/SOAT1StackGoLang/msvc-orders/internal/service/models"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockCategoriesService is a mock of CategoriesService interface.
type MockCategoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoriesServiceMockRecorder
}

// MockCategoriesServiceMockRecorder is the mock recorder for MockCategoriesService.
type MockCategoriesServiceMockRecorder struct {
	mock *MockCategoriesService
}

// NewMockCategoriesService creates a new mock instance.
func NewMockCategoriesService(ctrl *gomock.Controller) *MockCategoriesService {
	mock := &MockCategoriesService{ctrl: ctrl}
	mock.recorder = &MockCategoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoriesService) EXPECT() *MockCategoriesServiceMockRecorder {
	return m.recorder
}

// DeleteCategory mocks base method.
func (m *MockCategoriesService) DeleteCategory(ctx context.Context, userID, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, userID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoriesServiceMockRecorder) DeleteCategory(ctx, userID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoriesService)(nil).DeleteCategory), ctx, userID, id)
}

// GetCategory mocks base method.
func (m *MockCategoriesService) GetCategory(ctx context.Context, id uuid.UUID) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", ctx, id)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockCategoriesServiceMockRecorder) GetCategory(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockCategoriesService)(nil).GetCategory), ctx, id)
}

// InsertCategory mocks base method.
func (m *MockCategoriesService) InsertCategory(ctx context.Context, userID uuid.UUID, in *models.Category) (*models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCategory", ctx, userID, in)
	ret0, _ := ret[0].(*models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertCategory indicates an expected call of InsertCategory.
func (mr *MockCategoriesServiceMockRecorder) InsertCategory(ctx, userID, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCategory", reflect.TypeOf((*MockCategoriesService)(nil).InsertCategory), ctx, userID, in)
}

// ListCategories mocks base method.
func (m *MockCategoriesService) ListCategories(ctx context.Context, userID uuid.UUID, limit, offset int) (*models.CategoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx, userID, limit, offset)
	ret0, _ := ret[0].(*models.CategoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockCategoriesServiceMockRecorder) ListCategories(ctx, userID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCategoriesService)(nil).ListCategories), ctx, userID, limit, offset)
}
